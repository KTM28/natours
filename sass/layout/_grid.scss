.row {
    // max-width: if thw view port is smaller than 114rem then it will sipmly fill the availabe space
    max-width: $grid-width;
    // background-color: #eee;
    // to always center the row in the viewport - its also a trick to center a block elements inside of another block element. top/bottom 0 & left/right auto.
    margin: 0 auto;

    // usually it's done .row:last-child if you want to select just the last child element.
    // the not() means we select everything except the last child 
    &:not(:last-child) {
        margin-bottom: $gutter-vertical;

        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small;
        }
    }

    @include respond(tab-port) {
        max-width: 50rem;
        padding: 0 3rem;
    }

    // here we are using clearfix to restore the row height after flaot property is applied
    @include clearfix;

    //attribute selector
    // ^ üëâüèΩ symbol means where all the class atribute start with col-.
    [class^="col-"] {
        // background-color: orangered;
        float: left;

        &:not(:last-child) {
            margin-right: $gutter-horizontal;

            // since the coloums are vertical in small device they do not need margin right
            @include respond(tab-port) {
                margin-right: 0;
                margin-bottom: $gutter-vertical-small;
            }
        }

        // entire tablet and mobile devices will have only one single col per row
        @include respond(tab-port) {
            width: 100% !important;
        }
    }

    .col-1-of-2 {
        // entire width of the row minus(-) gutter-horizontal divided(/) by 2
        width: calc((100% - #{$gutter-horizontal}) / 2);
    }

    .col-1-of-3 {
        // entire width of the row minus(-) 2* gutter-horizontal divided(/) by 3
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);

    }

    // 2 * the width of col-1-of-3 + the gutter width
    .col-2-of-3 {
        width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});

    }

    .col-1-of-4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);

    }

    // 2 * the width of col-1-of-4 + gutter width
    .col-2-of-4 {
        width: calc(2* ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal})
    }

    // 3 * the width of col-1-of-4 + 2 * gutter width
    .col-3-of-4 {
        width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    }

}